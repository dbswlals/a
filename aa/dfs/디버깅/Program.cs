using System;

/*namespace 디버깅
{
    class Program
    {
        static void Main(string[] args)
        {
        디버깅이란:



            프로그램이 오작동하는 요소, 잘못된 코드부분 등을 버그라고하고

이 버그를 찾아내고 고치는 작업



F5 를 눌러 실행하는것은 단지 프로그램을 실행하는것이 아니라,  

개발자가 디버깅을 하기위한 모드로서 실행하는것.




버그가 의심되는부분에 중단점(F9) 를 지정하고 한단계씩(F10) 눌러서 코드를 실행해보면,  

코드가 실행되는 순서도 정확하게 볼 수 있으며, 버그를 잡아내기 편하다.




그리고 평소 코드 작성도 이 디버깅 을 하기 편하도록 작성하도록 해야하는데,  

 

이전에 했던 For Loop 예제를 보면




arr_Orc.Length 를 직접 조건에 삽입 하는 방법

            for (int i = 0; i < arr_Orc.Length; i++)

            {

                ~~~

            }



            arr_Orc.Length 를 따로 매개변수에 할당해서 매개변수를 조건에 삽입하는 방법

     int length = arr_Orc.Length;

            for (int i = 0; i < length; i++)

            {

                ~~~

            }



            위 두가지 방법 중에 2번을 택하고 있는데, 그 이유가 디버그 할 때 중단점을 명확하게 표시하기 편하게 하기 위함이다.

코드는 한 줄씩 실행되므로 연산이나 변화가 일어나는 부분에서 매개변수를 자주 활용해서

줄단위로 세분화해주는것이 중요하다.  




또다른 예시는 WriteLine 으로 복잡한 문자열을 출력할때 이다.  




public void Smash()

            {

                Console.WriteLine($"{name} (이)가 휘둘렀다!");

            }



            public void Smash()

            {

                string tmpString = $"{name} (이)가 휘둘렀다!";

                Console.WriteLine(tmpString);

            }



            똑같은 이유로, WriteLine 함수에 문제가있는지, 아니면 WriteLine 에 인수로 넣어준

$"{name} (이)가 휘둘렀다!" 라는 부분에 문제가 있는지 확인하고 싶어서 디버깅을한다고하면,  

중단점을 찍어도 명확한 결과를 얻지 못하거나 가독성이 매우 떨어질 수 있다.

따라서 이렇게 함수에 입력을 넣어주는 경우, 입력값이 연산을거쳐야 한다면

연산 오류와 함수 오류 둘 다 디버깅을 해야할 가능성이 있으므로

입력값을 연산한결과를 매개변수에 넣어주고, 매개변수를 함수 입력으로 쓰는 방식으로 코드를 작성하는것이 좋다.
        }
    }
}
*/